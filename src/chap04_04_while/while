while (조건식) {
    //조건식이 참인동안 반복될 문장
}

for문과 비교
for(int i=1 ; i<=10; i++){
    system.out.println(i);
}

//동일한 while문
int i=0;
while(i<=10){
    system.out.println(i);
    i++;
}

while문의 조건식은 생략 불가

do-while : while문의 변형으로 기본적인 구조는 while문과 같으나 조건식과 블럭{} 의 순서를 바꿔놓음.
                while문은 조건식에 따라 한 번도 수행이 안 될수도 있지만, do-while은 최소한 한 번은 수행됨
                while문과 다르게 블럭{}을 먼저 수행한 후에 조건을 평가함

                do{
                    //조건식이 참일때 수행될 문장들
                }while(조건식);

 break : 자신이 포함된 가장 가까운 반복문을 벗어남.
             무한 반복문에는 조건문과 break가 항상 사용됨.
             사용하지 않는다면 무한히 반복되기 때문에 프로그램이 종료되지않음.

 continue : 반복문 내에서만 사용될 수 있으며, 반복이 진행되는 도중에 continue문을 만나면 반복문의 끝으로 이동하여 다음 반복으로 넘어감.
                 for문의 경우 증감식으로 이동되며, while문과 do-while문의 경우 조건식으로 이동함
                 break와는 달리 반복문을 벗어나지 않음.

break문은 근접한 단 하나의 반복문만 벗어날 수 있기 때문에, 여러 개의 반복문이 중첩된 경우에는 break문으로 중첩된 반복문을 벗어날 수 없음.
이때는 중첩된 반복문 앞에 이름을 붙이고 break문과 continue문에 이름을 지정해줌으로써 하나 이상의 반복을 벗어나거나 반복을 건너뛸 수 있음.

Loop1 : for(int i=0; i<=10; i++){

    }



