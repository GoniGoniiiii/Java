배열 : 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것

         ex) 학생 5명의 점수를 저장
         int[] score=new int[5];

배열은 각 저장공간이 연속적으로 배치되어있음.

배열의 선언
        타입[] 변수이름 ;
        변수이름 = new 타입[길이];

        int[] score;
        score=new int[5];

배열의 요소 : 생성된 배열의 저장공간
인덱스 : 배열의 요소마다 붙여진 일련번호
인덱스의 범위 : 0부터 배열의 길이 -1까지

배열의 길이 : 배열을 생성할때 괄호[] 안에 배열의 길이를 적어줘야함.
                  배열의 요소 개수, 즉 값을 저장할 수 있는 공간의 개수
                  양의 정수여야만하고, 최대값은 int의 최대값 20억임.

                  타입[] 배열이름 = new타입[길이];
                  int[] arr=new int[5];

                   길이가 0인 배열도 있다.
                   int[] arr=new int[0];


배열이름.length : 배열의 길이에 대한 정보
        int[] arr=new int[5];
        int tmp=arr.length; =>5가 저장됨.

배열은 한 번 생성하면 길이를 변경할 수 없음. 이미 생성된 배열의 길이는 변하지 않음.
즉, 배열.length는 상수임.  값을 읽을수만 있고 변경할 수 없음.


ArrayIndexOutOfBoundsException : 배열의 index가 유효한 범위를 벗어났다는 뜻

배열의 공간이 부족한 경우?
    1. 더 큰 배열을 새로 생성
    2. 기조 냅열의 내용을 새로운 배열에 복사


배열의 초기화 : 생성과 동시에 자동적으로 자신의 타입에 해당하는 기본값으로 초기화되므로 배열을 사용하기전 따로 초기화를 하지않아도 되지만,
                     원하는 값을 저장하려면  각 요소마다 값을 지정해줘야됨.

                     배열의 생성과 초기화를 동시에 할 수 있음. 아래 두개가 같음.new int 생략 가능
                     int[] score=new int[]{ 50,60,70,80,90};
                     int[] score={50,60,70,80,90};

                    배열의 선언과 생성을 따로하는 경우에는 new int를 생략할 수 없음.
                    int[] score;
                    score=new int[]{50,60,70,80,90} ; 은 가능
                    score={50,60,70,80,90} 은 에러남. new int[] 생략 불가.

배열의 출력 : 초기화할때 for문을 사용하듯이, 배열에 저장된 값을 확인할때도 for문을 사용하면 됨.

                int[] Arr={50,60,70,80,90};

                for(int i=0; i<Arr.length; i++){
                    System.out.println(Arr[i]);
                }

                더 간단한 방법은 Arrays.toString() 메소드를 사용하면 됨.

                Arr의 값을 바로 출력한다면? Arr은 참조변수니까 변수에 저장된 값, '배열의 주소'가 출력될거라고 생각하지만
                타입@주소  형식으로 출력됨. 'I' 는 1차원 int배열 , @ 뒹[ 나오는 16진수는 배열의 주소(실제 주소 아닌 내부의 주소)
                => 참조변수를 출력해봐야 얻을정보가 별로 없음.

                예외적으로 char 배열은 println 메소드로 출력하면 각 요소가 구분자없이 그대로 출력
                println메소드가 char 배열일때만 이렇게 동작하도록 작성됨.


배열의 복사
    1. for문을 이용해서 복사
    2. System.arraycopy() 를 이용한 배열의 복사
        :for문은 배열의 요소 하나하나에 접근해서 복사하지만, arraycopy()는 지정된 범위의 값들을 한 번에 통째로 복사함.
        각 요소들이 연속적으로 저장되어 있다는 배열의 특성때문에 이렇게 처리가 가능함.

    => 배열의 복사는 for문보다는 System.arraycopy()를 사용하는 것이 효율적.
    System.arraycopy(num , 0, newNum , 0 ,num.length);

    num[0]에서 newNum[0]으로 num.length개의 데이터를 복사










