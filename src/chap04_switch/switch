if문은 조건식의 결과가 참,거짓 두가지 밖에 없기때문에 경우의 수가 많아질수록 else-if를 계속 추가해야하므로
조건식이 많아져서 복잡해지고, 여러 개의 조건식을 계산해야하므로 처리시간도 많이 걸림

switch문은 단 하나의 조건식으로 많은 경우의 수를 처리할 수 있고, 표현이 간결하므로 알아보기 쉬움.
처리할 경우의 수가 많을 때는 switch문으로 작성하는 것이 좋음
but, 제약조건이 있기 때문에 경우의 수가 많아도 어쩔수 없이 if문으로 작성해야하는 경우가 있음.

switch문은 조건식을 먼저 계산한 다음, 그 결과와 일치하는 case문으로 이동.
이동한 case문 아래에 있는 문장들을 수행하며, break문을 만나면 전체 switch문을 빠져나가게됨.

1) 조건식을 계산한다.
2) 조건식의 결과와 일치하는 case문으로 이동한다.
3) 이후의 문장들을 수행한다.
4) break문이나 switch문의 끝을 만나면 switch문 전체를 빠져나간다.

switch(조건식){
    case 값1 :

       break;

    case 값2 :

        break;

    default :  조건식의 결과와 일치하는 결과가 없을때 수행

}

조건식의 결과와 일치하는 결과가 없을때는 default문으로 이동후 수행
보통 마지막에 놓기 때문에 break를 쓰지 않아도 됨.

switch문에서 break문은 각 case문의 영역을 구분하는 역할을 하는데, break문을 생략?
case문 사이의 구분이 없어지므로 다른 break문을 만나거나 switch문 블럭{}의 끝을 만날때까지 모든 문장 수행
그렇기때문에 break문을 빼먹는 실수는 조심!!!!

고의적으로 break문을 생략하는 경우도 있음

switch(level){
    case 3:
            grantDelete();
    case 2:
            grantWrite();
    case 1:
            grantRead();
    }

로그인한 사용자의 등급을 체크하여 등급에 맞는 권한을 부여하는 방식인데
제일 높은 등급은 삭제,쓰기,읽기 권한을 다 가지고, 제일 낮은 등급은 읽기 권한 만을 가짐.

switch문의 제약조건
    1. switch문의 조건식 결과는 정수 또는 문자열 이어야한다.
    2. case문의 값은 정수 상수만 가능하며, 중복되지 않아야한다.

