반복문은 어떤 작업이 반복적으로 수행되도록 할 때 사용되며
종류로는 for , while, do-while 이 있음.

for문이나 while문은 조건에 따라 한 번도 수행되지 않을 수 있지만,
do-while은 최소한 한 번은 수행이 보장됨

for : 반복 횟수를 알고있을때 적합
        구조가 복잡하지만 직관적이려 이해하기 쉬움

        for(초기화 ; 조건식; 증감식;){
            수행될 문장
        }
- 초기화 : 반복문에 사용될 변수를 초기화하는 부분, 처음에 한 번만 수행됨
                   보통 변수 하나만 초기화하지만, 둘 이상의 변수가 필요할때는 ','를 구분자로 변수를 초기화하면됨.
                   둘 이상의 변수는 타입이 같아야함!


- 조건식 : 조건식의 값이 true 이면 반복을 계속하고 , 거짓이면 반복을 중단하고 for문을 벗어남.

- 증감식 : 반복문을 제어하는 변수의 값을 증가 or 감소시킴
               매 반복마다 변수의 값이 증감식에 의해 점진적으로 변하다가 결국 조건식이 거짓이 되어 for문을 벗어나게 됨.
               변수의 값을 증가시키는 '++'를 주로 사용하지만, 다양한 연산자들 가능
               ex) ++ , -- , +=2 , *=3

               쉼표를 이용해서 두 문장 이상을 하나로 연결해서 쓸 수 있음
               ex) for (int i=1, j=10 ; i<=10 ; i++ , j--) {     }

위의 세가지 요소는 필요하지 않으면 생략이 가능
=> 세가지 요소 모두 생략시 true로 간주되어 무한 반복문이 됨.

반복문은 어떤 작업이 반복적으로 수행되도록 할 때 사용되며
종류로는 for , while, do-while 이 있음.

for문이나 while문은 조건에 따라 한 번도 수행되지 않을 수 있지만,
do-while은 최소한 한 번은 수행이 보장됨

for : 반복 횟수를 알고있을때 적합
        구조가 복잡하지만 직관적이려 이해하기 쉬움

        for(초기화 ; 조건식; 증감식;){
            수행될 문장
        }
- 초기화 : 반복문에 사용될 변수를 초기화하는 부분, 처음에 한 번만 수행됨
                   보통 변수 하나만 초기화하지만, 둘 이상의 변수가 필요할때는 ','를 구분자로 변수를 초기화하면됨.
                   둘 이상의 변수는 타입이 같아야함!


- 조건식 : 조건식의 값이 true 이면 반복을 계속하고 , 거짓이면 반복을 중단하고 for문을 벗어남.

- 증감식 : 반복문을 제어하는 변수의 값을 증가 or 감소시킴
               매 반복마다 변수의 값이 증감식에 의해 점진적으로 변하다가 결국 조건식이 거짓이 되어 for문을 벗어나게 됨.
               변수의 값을 증가시키는 '++'를 주로 사용하지만, 다양한 연산자들 가능
               ex) ++ , -- , +=2 , *=3

               쉼표를 이용해서 두 문장 이상을 하나로 연결해서 쓸 수 있음
               ex) for (int i=1, j=10 ; i<=10 ; i++ , j--) {     }

위의 세가지 요소는 필요하지 않으면 생략이 가능
=> 세가지 요소 모두 생략시 true로 간주되어 무한 반복문이 됨.

중첩for문  : for문안에 for문을 포함시키는것

향상된 for문  : JDK1.5부터 배열과 컬렉션에 접근할 때 기존보다 편리한 방법으로 처리할 수 있도록 for문의 새로운 문법이 추가됨.
    for(타입 변수명 : 배열 or 컬렉션){ }

    for(int i=0; i< arr.length; i++){      system.out.println( arr[i] )    } == for( int tmp : arr){   system.out.println(    tmp   )   }

