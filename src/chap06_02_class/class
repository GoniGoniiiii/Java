클래스와 객체
    클래스 : 객체를 정의해 놓은것 => 객체를 생성하는데 사용
    객체 : 실제로 존재하는것. 사물 or 개념.
        - 유형의 객체 : 책상, 의자, 자동차와 같은 사물
        - 무형의 객체 : 수학공식, 프로그램 에러와 같은 논리나 개념

    프로그래밍에서의 객체 : 클래스에 정의된 내용대로 메모리에 생성된 것을 뜻함.

클래스와 객체의 관계
    ex) 제품 설계도와 제품의 관계
          TV 설계도(클래스)는 TV라는 제품(객체)를 정의한 것, TV를 만드는데 사용됨.

    클래스는 단지 객체를 생성하는데 사용될뿐, 객체 그 자체는 아님.
    우리가 TV를 보기위해서 TV(객체)가 필요한거지 TV설계도(클래스)가 필요한 것은 아님.
    TV설계도를 통해 TV가 만들어진 후에야 사용할 수 있음.
    클래스를 정의하고 클래스를 통해 객체를 생성하는 이유는  설계도를 통해서 제품을 만드는 이유와 같음.
    하나의 설계도만 잘 만들어놓으면 제품을 만드는일이 쉬워짐.
    제품을 만들때마다 매번 고민하지않고 설계도대로만 만들면 되기때문에.
    이와 마찬가지로 클래스를 한 번만 잘 만들어놓으면, 매번 객체를 생성할때마다 어떻게 객체를 만들어야하는지 고민하지 않아도됨.
    그냥 클래스로부터 객체를 생성해서 사용하기만 하면됨.

    => 프로그래밍에서는 클래스를 작성한 다음, 클래스로부터 객체를 생성하여 사용

객체와 인스턴스
    인스턴스화 : 클래스로부터 객체를 만드는 과정
    인스턴스 : 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고함.

    => 인스턴스와 객체는 같은 의미이지만, 객체는 모든 인스턴스를 대표하는 포괄적인 의미
         인스턴스는 어떤 클래스로부터 만들어진 것인지를 강조하는 보다 구체적 의미


객체의 구성요소 :
    객체는 속성과 기능, 두 종류의 구성요소로 이루어짐.
    일반적으로 다수의 속성과 다수의 기능을 가짐.
    => 속성과 기능의 집합

    객체가 가지고 있는 속성과 기능을  그 객체의 멤버(구성원)이라고 함.

    클래스 : 객체를 정의한 것이므로 클래스에는 객체의 모든 속성과 기능이 정의되어있음.
    => 클래스로부터 객체를 생성하면 클래스에 정의된 속성과 기능을 가진 객체가 만들어지는것.

    속성 : 멤버변수, 특성, 필드, 상태
    ex) 크기, 길이, 높이, 색상, 볼륨, 채널 등
    기능 : 메소드, 함수, 행위
    ex) 켜기, 끄기, 볼륨 높이기, 볼륨 낮추기, 채널 변경하기 등

    객체지향 프로그래밍에서는 속성과 기능을 각각 변수 와 메소드로 표현
        속성 == 변수
        기능 == 메소드


인스턴스의 생성과 사용
    TV클래스를 선언한 것은 TV 설계도를 작성한 것에 불과하므로 TV 인스턴스를 생헝하여 제품을 사용할 수 있음.
    생성하는 방법은 여러가지 방법이 있지만 일반적으로는 이렇게 함.

    클래스명 변수명 ;                  클래스의 객체를 잠조하기위한 참조변수를 선언
    변수명 = new 클래스명();      클래스의 객체를 생성 후, 객체의 주소를 참조변수에 저장

    TV t;                                 TV 클래스 타입의 참조변수 t를 선언
    t = new TV();                    TV인스턴스를 생성한 후, 생성된 TV인스턴스의 주소를 t에 저장.

    => 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야함.
         참조변수에는 하나의 값(주소)만이 저장될 수 있음.
         둘 이상의 참조변수가 하나의 인스턴스를 참조하는 것은 가능하지만,
         하나의 참조변수로 여러개의 인스턴스를 참조하는것은 불가능함.

객체 배열 :
    객체로 이루어진 배열 , 객체 배열 안에 객체가 저장되는 것은 아니고 객체의 주소가 저장됨.
        TV tv1, tv2, tv3 ;  => TV[] tvARr= new TV[3] ;
        길이가 3인 배열을 생성하면, 각 요소는 참조변수의 기본값인 null로 초기화됨.

        객체를 생성해서 객체 배열의 각 요소에 저장하는 것을 기억!!!!
        TV[] tvArr= new TV[3];  참조변수 배열(객체배열)을 생성

        객체를 생성해서 배열의 각 요소에 저장
        tvArr[0]=new TV();
        tvArr[1]=new TV();
        tvArr[2]=new TV();

    초기화 블럭을 사용하면 한 줄로 간단히 정리할 수 있음
    TV[] tvArr= {new TV(), new TV(), new TV() };

    다뤄야 할 객체의 수가 많을때는 for문 사용
    TV[] tvArr= new TV[100];

    for(int i=0; i<tvArr.length; i++){
        tvArr[i]=new TV();
    }

클래스의 또 다른 정의
    클래스 : 객체를 생성하기 위한 틀, 속성과 기능으로 정의되어 있음.

    프로그래밍 관점 ?
        1. 변수 : 하나의 데이터를 저장할 수 있는 공간
        2. 배열 : 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
        3. 구조체 : 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
        4. 클래스 : 데이터와 함수의 결합(구조체 + 함수)

    사용자 정의 타입: 프로그래밍 언어에서 제공하는 자료형 외에 프로그래머가
                           서로 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는것.

    자바와 같은 객체지향언어에서는 클래스가 곧 사용자 정의타입임.
    기본형의 개수는 8개로 정해져 있지만 참조형 개수가 정해져있지 않은 이뉴는 프로그래머가 새로운 타입을 추가할 수 있기때문.






