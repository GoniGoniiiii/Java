연산자 : 연산을 수행하는 기호
피연산자 : 연산자의 작업 대상(변수, 상수, 리터럴, 수식)
=> 연산자는 피연산자로 연산을 수행하고 나면 항상 리턴값을 반환

식 : 연산자와 피연산자를 조합하여 계산하고하는 바르 얻는것
식을 평가 한다: 식을 계산하여 값을 얻는 것

종류
    - 산술 연산자 : 사칙연산과 나머지 연산                    +  -  *  /  %  <<  >>
    - 비교 연산자 : 크고 작음과 같고 다름을 비교             >  <  >=  <=  ==  !==
    - 논리 연산자 : '그리고' 와 '또는' 으로 조건을 연결      &&  ||  !  &  |  ^  ~
    - 대입 연산자 : 우변의 값을 좌변에 저장                   =
    - 기타 : 형변환 연산자, 삼항 연산자, 인스턴스 연산자 (type) ? : instanceof

개수에 따라
    1개 : 단항 연산자
    2개 : 이항 연산자
    3개 : 삼항 연산자

우선순위와 결합규칙
    -우선순위
        1. 산술 > 비교 > 논리 > 대입    대입은 제일 마지막에 수행
        2. 단항 > 이항 > 삼항             단항 연산자의 우선순위가 이항 연산자의 순위보다 높다.
        3. 단항 연산자와 대입 연산자를 제외한 모든 연산자의 진행방향은 왼쪽에서 오른쪽

    - 결합규칙 : 대부분 왼쪽-> 오른쪽,
                     단항 연산자와 대입 연산자만 그 반대로


산술변환(usual arithmetic conversion)
    : 연산전에 피연산자의 타입의 일치를 위해 자동으로 형변환 되는 것

    규칙
        1. 두 연산자의 타입을 같게 일치시킨다.(큰 타입으로 일치 시킴)
            => 피연산자의 값손실을 최소화 하기위해

        2. 피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
            => 정수형의 기본타입인 int가 가장 효율적으로 처리할 수 있는 타입이라서
                 int 보다 좁은 타입은 표현 범위가 좁아 연산중에 overflow가 발생할 가능성이 있음


단항 연산자
    - 증감 연산자 : 피연산자의 값을 1 증가시킨다    ++
    - 감소 연산자 : 피연산자의 값을 1 감소시킨다    --

    => 피연산자의 왼쪽에 위치하면 전위형, 오른쪽에 위치하면 후위형
        - 전위형 : 값이 참조되기 전에 증가시킨다.
        - 후위형 : 값이 참조된 후에 증가시킨다.


산술 연산자
  : + - * / %
  곱셈 > 나눗셈 > 나머지연산자 > 덧셈 > 뺄셈

비교 연산자
    - 대소비교 연산자
        > : 좌변값이 크면 true, 작으면 false
        < : 우변값이 크면 true, 작으면 false
        >= : 좌변값이 같거나 크면 true, 작으면 false
        <= : 우변값이 같거나 크면 true, 작으면 false

    - 등가비교 연산자
        == : 두 값이 같으면 true, 아니면 false
        !=  : 두 값이 같지않으면 true, 아니면 false

문자열의 비교 : ' == ' 는 두 문자열이 완전히 같은것인지 비교할 뿐이고,
                    문자열의 내용이 같은지 확인하려면 'equals()'메소드를 사용해야 함
                    같으면 true, 다르면 false 반환

                    - 내용이 같은데도 ' == ' 로 비교하면 false => 서로 다른 객체이기때문에
                    - equals() 는 객체가 달라도 내용이 같으면 true
                    - equalsIgnoreCase()  대소문자 구분없이 비교하고 싶을 때

논리 연산자
    - ||  : 피연산자 중 어느 한 쪽만 true 이면 true를 결과로 얻는다.
    - && : 피연산자 양쪽 모두 true 이어야 true를 결과로 얻는다.

논리 부정 연산자
    - ! : 피연산자가 true이면 false를 , false이면 true를 반환

비트 연산자 : 피연산자를 비트단위로 논리 연산
    - | (OR) : 피연산자 중 한 쪽 값이 1이면, 1을 결과로 얻음. 그 외에는 0을 얻음
    - & (AND) : 피연산자 중 양 쪽 모두가 1이면, 1을 결과로 얻음. 그 외에는 0을 얻음
    - ^ (XOR) : 피연산자의 값이 서로 다르면 , 1을 결과로 얻음. 같을 때는 0을 얻음

비트 전환 연산자 : 논리부정 연산자 ! 와 유사함
    ~ : 비트 전환, 부호가 반대로 변경됨

쉬프트 연산자 : 피연산자의 자리(2진수로 표현했을 때)를 '오른쪽' or '왼쪽'으로 이동
    - 자리 이동으로 저장범위를 벗어난 값들은 버려지고 빈자리는 0으로 채워짐!
    - 다른 이항 연산자들과 달리 피연산자의 타입을 일치시킬 필요가 없기 때문에 우측 피연산자에 산술변환 X
    - << 연산자의 경우 , 피연산자의 부호에 상관없이 각 자리를 왼쪽으로 이동시키며 빈칸을 0으로만 채우면됨
    - >> 연산자의 경우, 오른쪽으로 이동시키기  때문에 부호있는 정수는 부호를 유지하기 위해 왼쪽 피연산자가 음수인 경우 빈자리를 1로 채움
     ex ) -8 >> 2

    ex) 8 << 2 는 왼쪽 피연산자인 10진수 8의 2진수를 왼쪽으로 2자리 이동
    1) 10진수 8은 2진수로
        0 0 0 0 1 0 0 0
    2) 8 << 2 는 2진수를 왼쪽으로 2자리 이동 시킴
        0 0 1 0 0 0
    3) 자리 이동을 위해 벗어난 값들은 버리고, 빈자리 0으로 채우기
        0 0 1 0 0 0 0 0
    4) 8 << 2 의 결과는 0 0 1 0 0 0 0 0  ( 10진수로 32)

    - x << n 은 x * 2의 n승의 결과와 같음
    - x >> n 은 x / 2의 n승의 결과와 같음

    - << 연산자를 사용하는 것이 나눗셈 or 곱셈 연산자를 사용하는 것보다 더 빠름
        그러나 프로그램의 속도도 중요하지만 가독성도 중요!
        보다 빠른 실행속도가 요구되어지는 곳에만 사용하는 것을 권장

조건 연산자  : 조건식, 식1 , 식2 모두 세개의 피연산자를 필요로 하는 삼항 연산자 , 삼항 연산자는 조건 연산자 하나뿐
    조건식?  식1 : 식2
    => 조건식이 true 이면 식1, false 이면 식2

대입 연산자 : 변수와 같은 저장공간에 값 또는 수식의 연산결과를 저장하는데 사용
                  연산 진행 방향 : 오른쪽 -> 왼쪽

복합 대입 연산자 : 다른 연산자와 결합하여 op=같은 방식으로 사용
    ex) i += 3 =>  i = i + 3







