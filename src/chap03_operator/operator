연산자 : 연산을 수행하는 기호
피연산자 : 연산자의 작업 대상(변수, 상수, 리터럴, 수식)
=> 연산자는 피연산자로 연산을 수행하고 나면 항상 리턴값을 반환

식 : 연산자와 피연산자를 조합하여 계산하고하는 바르 얻는것
식을 평가 한다: 식을 계산하여 값을 얻는 것

종류
    - 산술 연산자 : 사칙연산과 나머지 연산                    +  -  *  /  %  <<  >>
    - 비교 연산자 : 크고 작음과 같고 다름을 비교             >  <  >=  <=  ==  !==
    - 논리 연산자 : '그리고' 와 '또는' 으로 조건을 연결      &&  ||  !  &  |  ^  ~
    - 대입 연산자 : 우변의 값을 좌변에 저장                   =
    - 기타 : 형변환 연산자, 삼항 연산자, 인스턴스 연산자 (type) ? : instanceof

개수에 따라
    1개 : 단항 연산자
    2개 : 이항 연산자
    3개 : 삼항 연산자

우선순위와 결합규칙
    -우선순위
        1. 산술 > 비교 > 논리 > 대입    대입은 제일 마지막에 수행
        2. 단항 > 이항 > 삼항             단항 연산자의 우선순위가 이항 연산자의 순위보다 높다.
        3. 단항 연산자와 대입 연산자를 제외한 모든 연산자의 진행방향은 왼쪽에서 오른쪽

    - 결합규칙 : 대부분 왼쪽-> 오른쪽,
                     단항 연산자와 대입 연산자만 그 반대로


산술변환(usual arithmetic conversion)
    : 연산전에 피연산자의 타입의 일치를 위해 자동으로 형변환 되는 것

    규칙
        1. 두 연산자의 타입을 같게 일치시킨다.(큰 타입으로 일치 시킴)
            => 피연산자의 값손실을 최소화 하기위해

        2. 피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
            => 정수형의 기본타입인 int가 가장 효율적으로 처리할 수 있는 타입이라서
                 int 보다 좁은 타입은 표현 범위가 좁아 연산중에 overflow가 발생할 가능성이 있음


단항 연산자
    - 증감 연산자 : 피연산자의 값을 1 증가시킨다    ++
    - 감소 연산자 : 피연산자의 값을 1 감소시킨다    --

    => 피연산자의 왼쪽에 위치하면 전위형, 오른쪽에 위치하면 후위형
        - 전위형 : 값이 참조되기 전에 증가시킨다.
        - 후위형 : 값이 참조된 후에 증가시킨다.




