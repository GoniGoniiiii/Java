메소드 :
    특정 작업을 수행하는 일련의 문장들을 하나로 묶은것
    함수와 유사함. 어떤값을 입력하면 이 값으로 작업을 수행해서 결과를 반환
    내부가 보이는 블랙박스 라고도 함.

사용 이유
    1. 높은 재사용성
        : Java API에서 제공하는 메소드들을 사용하면서 경험한 것처럼 한 번 만들어놓은 메소드는
         몇 번이고 호출할 수 있으며, 다른 프로그램에서도 사용가능

    2. 중복된 코드의 제거
        : 반복되는 문장들을 묶어서 하나의 메소드로 작성해놓으면, 반복되는 문장들 대신 메소드를 호출하는 한 문장으로 대체할 수 있음.
          전체 소스 코드의 길이도 짧아지고, 변경사항이 발생했을때 수정해야할 코드의 양이 줄어들어 오류가 발생할 가능성이 줄어듦.

    3. 프로그램의 구조화
        : 작은 프로그램을 작성할때는 문제가 없지만, 큰 규모의 프로그램에서는 문장들을 작업단위로 나눠서
          여러개의 메소드에 담아 프로그램의 구조를 단순화시키는것이 필수적.
          프로그램의 전체 흐름이 한 눈에 들어올 정도로 단순하게 구조화하는것이 좋음.
          처음에 프로그램을 설계할 때 내용이 없는 메소드를 작업단위로 만들어놓고, 하나씩 완성해가는것도 프로그램을 구조화시키는 좋은 방법.

메소드의 선언과 구현
    - 메소드 선언부 : 메소드의 이름, 매개변수 선언, 그리고 반환 타입으로 구성되어 있음.
                           메소드가 작업을 수행하기 위해 어떤 값들을 필요로하고 작업 결과로 어떤 타입의 값을 반환하는지에 대한 정보를 제공.
                           메소드의 선언부는 후에 변경사항이 발생하지 않도록 신중히 작성해야함.
                           선언부를 변경하게 되면, 호출되는 모든 곳도 같이 변경해야함.

    - 매개변수 선언 : 매개변수는 메소드가 작업을 수행하는데 필요한 값들(입력)을 제공받기 위한 것.
                             필요한 개수만큼 변수를 선언하며 각 변수 간의 구분은 쉼표','를 사용함.
                             일반적인 변수선언과 달리 두 변수의 타입이 같아도 변수의 타입을 생략할 수 없음.
                             선언할 수 있는 매개변수의 개수는 거의 제한이 없지만,
                             입력해야할 값의 개수가 많을 경우 배열이나 참조 변수를 사용하면됨.
                             아무것도 입력안해도 됨.  매개변수도 메소드내에 선언된 것으로 간주되므로 지역변수임.

   - 메소드의 이름 : 변수의 명명규칙대로 작성하면됨. 특정 작업을 수행하므로 동사인 경우가 많고,
                           이름만으로도 메소드의 기능을 쉽게 알 수 있도록 함축적이면서도 의미있는 이름을 짓도록 노력해야함.

   -  반환타입 : 메소드의 작업수행 결과(출력)인 '반환값'의 타입을 적는다. 반환값이 없는 경우 void를 적어야함.

   -  메소드 구현부 : 메소도의 선언부 다음에 나오는 괄호{}를 메소드의 구현부 라고함.
                           메소드를 호출했을 때 수행될 문장들을 넣음.

   - return문 : 메소드의 반환타입이 void가 아닌 경우, 구현부{} 안에 return 반환값; 이 반드시 포함되어 있어야함.
                      작업을 수행한 결과인 반환값을 호출한 메소드를 전달하는데, 이 값의 타입은 반환타입과 일치하거나 자동 형변환이 가능해야함.
                      여러개의 변수를 선언할 수 있는 매개변수의 달리 return문은 단 하나의 값만 반환할 수 있고,
                      메소드로의 입력(매개변수)는 여러개일수 있지만 출력값(반환값)은 최대 하나만 허용

   - 지역변수 : 메소드 내 선언된 변수
                    메소드 내에 선언된 변수들은 그 메소드 내에서만 사용할 수 있으므로 서로 다른 메소드라면 같은 이름의 변수를 선언해도됨.


메소드의 호출 : 메소드를 정의했어도 호출하지 않으면 아무일도 일어나지않음
                    메소드이름(값1,값2,....);  이렇게 호출할 수 있음
                    print99danAll();  void prin99danAll(void)를 호출
                    int result=add(3,5); int add(int x, int y)를 호출하고 결과값을 result에 저장

    - 인자와 매개변수 : 메소드를 호출할 때 괄호()안에 지정해준 값들을 '인자' or '인수'라고함;
                              인자의 개수와 순서는 메소드에 선언된 매개변수와 일치해야함.
                              인자는 메소드가 호출되면서 매개변수에 대입되므로, 인자의 타입은 매개변수의 타입과 일치하거나 자동형변환이 가능해애함.

    - 메소드의 실행 흐름 : 같은 클래스 내의 메소드,끼리는 참조변수를 사용하지않고도 서로 호출이 가능하지만
                                  static 메소드는 같은 클래스 내의 인스턴스 메소드를 호출할 수 없음.
                                  메소드가 호출되면 지금까지 실행중이던 메소드는 실행을 잠시 멈추고 호출된 메소드의 문장들을 실행.
                                  메소드는 호출 시 넘겨받은 값으로 연산을 수행하고 그 결과를 반환하면서 종료됨.
                                  반환된 값은 대입연산자에 의해서 변수에 저장됨.
                                  메소드의 결과를 저장하기 위한 변수 역시 반환값과 같은 타입이거나 자동형변환 가능해야함.


return문 : 현재 실행중인 메소드를 종료하고 호출한 메소드로 되돌아감.
                원래는 반환값의 유무에 관계없이 모든 메소드에는 적어도 하나의 return문이 있어야함.
                but 반환타입이 void인 경우 컴파일러가 메소드의 마지막에 return;을 자동적으로 추가해주었기때문에 오류발생 x
                반환타입이 void가 아닌경우는 ,반드시 return문이 있어야함. return문이 없으면 컴파일 에러발생

    - 반환값  : return문의 반환값으로 주로 변수가 오긴 하지만 , 수식이 올 수도 있음.
                   수식이 반환되는게 아니고 수식을 계산한 결과가 반환됨.

    - 매개변수의 유효성 검사 : 메소드의 구현부를 작성할 때, 제일 먼저 해야하는 일이 매개변수의 값이 적절한지 확인해야함.
                                        타입만 맞으면 어떤 값도 매개변수를 통해 넘어올 수 있기때문에, 가능한 모든 경우의 수에 대해 고민하고 그에 대비한 코드를 작성해야함.
                                        적절하지 않은 값이 매개변수를 통해 넘어온다면 매개변수의 값을 보정 or 보정이 불가능 하다면 return문을 사용해 작업을 중단하고 호출된 메소드로 돌아가야함.
                                        메소드를 작성할때 매개변수의 유효성 검사하는 코드를 꼭 넣어라!



